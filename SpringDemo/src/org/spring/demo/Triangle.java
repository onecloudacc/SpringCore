package org.spring.demo;

import java.util.List;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class Triangle implements ShapeInterface{

	/*
	 * InitializingBean,DisposableBean are interface included to the Triangle bean for initializing and destroying objects. When the spring sees that these are implemented, it executes the method afterPropertiesSet and  destroy() automatically
	 */
	String type; // using this variable as an example for SETTER Injection. refer property in spring.xml 
	int height;// using this variable as an example for Constructor Injection. refer constructor-arg in spring.xml
	int length;// using this variable as an example for Constructor Injection. refer constructor-arg in spring.xml
	int  width;// using this variable as an example for Constructor Injection. refer constructor-arg in spring.xml
	
	Point pointA;
	Point pointB;
	Point pointC;
	
	List<Side> sides;
	
	
	public Point getPointA() {
		return pointA;
	}


	public void setPointA(Point pointA) {
		this.pointA = pointA;
	}


	public Point getPointB() {
		return pointB;
	}


	public void setPointB(Point pointB) {
		this.pointB = pointB;
	}


	public Point getPointC() {
		return pointC;
	}


	public void setPointC(Point pointC) {
		this.pointC = pointC;
	}


	public Triangle( int length, int width) {
		
		
	this.length = length;
		this.width = width;
	}


	public String getType() {
		return type;
	}


	public void setType(String type) {
		this.type = type;
	}

	
	

	public int getHeight() {
		return height;
	}



	public int getLength() {
		return length;
	}



	public int getWidth() {
		return width;
	}


	


	


	public List<Side> getSides() {
		return sides;
	}


	public void setSides(List<Side> sides) {
		this.sides = sides;
	}


	/*public void drawTriangle()
	{
		System.out.println( getType()+" Triangle drawn");
		 System.out.println("Length : " + getLength() + " Width : " + getWidth());
		 // A triangle has 3 points (each denoted by x,y coordinates)
		 System.out.println("point A: "+getPointA().getX() +"," + getPointA().getY());
		 System.out.println("point B: "+getPointB().getX() +"," + getPointB().getY());
		 System.out.println("point C: "+getPointC().getX() +"," + getPointC().getY());
		 
		 
		 for(Side var :sides )
		 {
			 System.out.println("sides\n "+var.getSide1() + ", " + var.getSide2()+ ", " + var.getSide3());
		 }
		 
		 
		 
	}*/


	/*
	 * The below autogenerated methods will be used if we implement InitializingBean,DisposableBean  ex: the  public class Triangle implements InitializingBean,DisposableBean
	 * @Override
	public void destroy() throws Exception {
		System.out.println("DisposableBean: In Destroy method");
		
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub
		System.out.println("InitializingBean: In init method");
	}
	Incase if we wanna write out own custom init and desctrou method with out implementing the spring provided beans (InitializingBean,DisposableBean), the initialization
	and destroring can be configured in spring.xml. see there.
	*/

	void myInit ()
	{
		System.out.println("My custom init method");
	}
	
	void myDestroy ()
	{
		System.out.println("My custom Destroy method");
	}


	@Override
	public void draw() {

		System.out.println( getType()+" Triangle drawn");
		 System.out.println("Length : " + getLength() + " Width : " + getWidth());
		 // A triangle has 3 points (each denoted by x,y coordinates)
		 System.out.println("point A: "+getPointA().getX() +"," + getPointA().getY());
		 System.out.println("point B: "+getPointB().getX() +"," + getPointB().getY());
		 System.out.println("point C: "+getPointC().getX() +"," + getPointC().getY());
		 
		 
		 for(Side var :sides )
		 {
			 System.out.println("sides\n "+var.getSide1() + ", " + var.getSide2()+ ", " + var.getSide3());
		 }
		
	}
}



/*1) BeanPostProcessor.postProcessBeforeInitialization()

2) init()

3) BeanPostProcessor.postProcessAfterInitialization()

4) destroy()

You may check this by writing simple example having sysout and check their sequence.*/